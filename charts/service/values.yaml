# Default values for service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: feelguuds/service
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: "service"
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "service"

podAnnotations:
  name: feelguuds/service
  platform: simfiny
  domain: backend/services

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

postgres:
  enabled: true

service:
  enabled: true
  annotations: {}
  type: ClusterIP
  externalPort: 9898
  grpcPort: 9896
  grpcService: service
  nodePort: 31198
  hostPort:
  env:
    ENVIRONMENT: "local"
    HOST: ""
    METRICS_PORT: "9899"
    GRPC_PORT: "9896"
    GRPC_SERVICE_NAME: "service"
    LOG_LEVEL: "info"
    BACKEND_URL: ""
    RANDOM_DELAY: false
    RANDOM_DELAY_UNIT: "ms"
    RANDOM_DELAY_MIN: 0
    RANDOM_DELAY_MAX: 5
    RANDOM_ERROR: false
    STRESS_CPU: 0
    STRESS_MEMORY: 0
    NEWRELIC_KEY: "62fd721c712d5863a4e75b8f547b7c1ea884NRAL"
    DATABASE_HOST: "service-db"
    DATABASE_PORT: "5432"
    DATABASE_USER: "service"
    DATABASE_PASSWORD: "service"
    DATABASE_NAME: "service"
    DATABASE_SSLMODE: "disable"
    MAX_DATABASE_CONNECTION_ATTEMPTS: "3"
    MAX_DATABASE_CONNECTION_RETRIES: "2"
    MAX_DATABASE_RETRY_TIMEOUT: "500ms"
    MAX_DATABASE_RETRY_SLEEP: "100ms"
    GRPC_DEADLINE_IN_MS: "2000"
    GRPC_RETRIES: "3"
    GRPC_RETRY_TIMEOUT: "600"
    GRPC_RETRY_BACKOOF: "600"
    SERVICE_ENVIRONMENT: "Development"
    SERVICE_DOCUMENTATION: "https://github.com/SimifiniiCTO/simfinii/blob/main/src/backend/services/service/documentation/setup.md"
    POINT_OF_CONTACT: "yoanyomba"
    METRICS_REPORTING_ENABLED: true

dependencies:
  dtmManager:
    name: dtm-manager
    grpcPort: 36790
    httpPort: 36789

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: service.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: service-tls
      hosts:
        - service.local

tls:
  enabled: false
  # the name of the secret used to mount the certificate key pair
  secretName:
  # the path where the certificate key pair will be mounted
  certPath: /data/cert
  # the port used to host the tls endpoint on the service
  port: 9899
  # the port used to bind the tls port to the host
  # NOTE: requires privileged container with NET_BIND_SERVICE capability -- this is useful for testing
  # in local clusters such as kind without port forwarding
  hostPort:

resources:
  limits:
    memory: 256Mi
    cpu: 100m
  requests:
    cpu: 100m
    memory: 64Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# create a certificate manager certificate (cert-manager required)
certificate:
  create: true
  # the issuer used to issue the certificate
  issuerRef:
    kind: ClusterIssuer
    name: self-signed
  # the hostname / subject alternative names for the certificate
  dnsNames:
    - service

# metrics-server add-on required
hpa:
  enabled: true
  maxReplicas: 5
  # average total CPU usage per pod (1-100)
  cpu: 99
  # average memory usage per pod (100Mi-1Gi)
  memory:
  # average http requests per second per pod (k8s-prometheus-adapter)
  requests:

deploymentStrategy:
  maxSurge: 25%
  maxUnavailable: 25%
  type: RollingUpdate

failures:
  failurethreshold: 5
  periodSeconds: 30
  successThresholds: 1
  timeoutSeconds: 10
  initialDelaySeconds: 30

integrationTests:
  enabled: false

# failure conditions
faults:
  delay: false
  error: false
  unhealthy: false
  unready: false
  testFail: false
  testTimeout: false

# Redis address in the format tcp://<host>:<port>
cache: ""
# Redis deployment
redis:
  enabled: true
  repository: redis
  tag: 6.0.8

linkerd:
  profile:
    enabled: false

# create Prometheus Operator monitor
serviceMonitor:
  enabled: false
  interval: 15s
  additionalLabels: {}