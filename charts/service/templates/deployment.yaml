{{- $namespace := .Release.Namespace -}}
{{- $svctag := "svc.cluster.local" -}}
{{- $dtmManagerSvcName := .Values.dependencies.dtmManager.name -}}
{{- $dtmManagerGrpcPort := .Values.dependencies.dtmManager.grpcPort -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "service.fullname" . }}
  labels:
    {{- include "service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.hpa.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
        maxSurge: 2
        maxUnavailable: 1
  selector:
    matchLabels:
      {{- include "service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "service.selectorLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.service.httpPort }}"
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      terminationGracePeriodSeconds: 30
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ template "service.serviceAccountName" . }}
      {{- end }}
      initContainers:
      {{- if eq .Values.service.env.ENVIRONMENT "local" }}
      - name: init-user-svc-db-dependency
        image: busybox:1.28
        command: ['sh', '-c', "until nslookup service-db.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for service-db.; sleep 10; done"]
	  {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: grpc
              containerPort: {{ .Values.service.env.GRPC_PORT }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: HOST
              value: "{{ .Values.service.env.HOST }}"
            - name: METRICS_PORT
              value: "{{ .Values.service.env.METRICS_PORT }}"
            - name: GRPC_PORT
              value: "{{ .Values.service.env.GRPC_PORT }}"
            - name: GRPC_SERVICE_NAME
              value: "{{ .Values.service.env.GRPC_SERVICE_NAME }}"
            - name: LOG_LEVEL
              value: "{{ .Values.service.env.LOG_LEVEL }}"
            - name: BACKEND_URL
              value: "{{ .Values.service.env.BACKEND_URL }}"
            - name: RANDOM_DELAY
              value: "{{ .Values.service.env.RANDOM_DELAY }}"
            - name: RANDOM_DELAY_UNIT
              value: "{{ .Values.service.env.RANDOM_DELAY_UNIT }}"
            - name: RANDOM_DELAY_MIN
              value: "{{ .Values.service.env.RANDOM_DELAY_MIN }}"
            - name: RANDOM_DELAY_MAX
              value: "{{ .Values.service.env.RANDOM_DELAY_MAX }}"
            - name: RANDOM_ERROR
              value: "{{ .Values.service.env.RANDOM_ERROR }}"
            - name: STRESS_CPU
              value: "{{ .Values.service.env.STRESS_CPU }}"
            - name: STRESS_MEMORY
              value: "{{ .Values.service.env.STRESS_MEMORY }}"
            - name: NEWRELIC_KEY
              value: "{{ .Values.service.env.NEWRELIC_KEY }}"
            - name: DATABASE_HOST
              {{- if eq .Values.service.env.ENVIRONMENT "local" }}
              value: "{{ .Values.service.env.DATABASE_HOST }}.{{ $namespace }}.{{ $svctag }}"
              {{- else }}
              value: "{{ .Values.service.env.DATABASE_HOST }}"
              {{- end }}
            - name: DATABASE_PORT
              value: "{{ .Values.service.env.DATABASE_PORT }}"
            - name: DATABASE_USER
              value: "{{ .Values.service.env.DATABASE_USER }}"
            - name: DATABASE_PASSWORD
              value: "{{ .Values.service.env.DATABASE_PASSWORD }}"
            - name: DATABASE_NAME
              value: "{{ .Values.service.env.DATABASE_NAME }}"
            - name: DATABASE_SSLMODE
              value: "{{ .Values.service.env.DATABASE_SSLMODE }}"
            - name: MAX_DATABASE_CONNECTION_ATTEMPTS
              value: "{{ .Values.service.env.MAX_DATABASE_CONNECTION_ATTEMPTS }}"
            - name: MAX_DATABASE_CONNECTION_RETRIES
              value: "{{ .Values.service.env.MAX_DATABASE_CONNECTION_RETRIES }}"
            - name: MAX_DATABASE_RETRY_TIMEOUT
              value: "{{ .Values.service.env.MAX_DATABASE_RETRY_TIMEOUT }}"
            - name: MAX_DATABASE_RETRY_SLEEP
              value: "{{ .Values.service.env.MAX_DATABASE_RETRY_SLEEP }}"
            - name: GRPC_DEADLINE_IN_MS
              value: "{{ .Values.service.env.GRPC_DEADLINE_IN_MS }}"
            - name: GRPC_RETRIES
              value: "{{ .Values.service.env.GRPC_RETRIES }}"
            - name: GRPC_RETRY_TIMEOUT
              value: "{{ .Values.service.env.GRPC_RETRY_TIMEOUT }}"
            - name: GRPC_RETRY_BACKOOF
              value: "{{ .Values.service.env.GRPC_RETRY_BACKOOF }}"
            - name: DTM_MANAGER_URI
              value: "{{ $dtmManagerSvcName }}.{{ $namespace }}.{{ $svctag }}:{{ $dtmManagerGrpcPort }}"
            - name: SERVICE_ENVIRONMENT
              value: "{{ .Values.service.env.SERVICE_ENVIRONMENT }}"
            - name: SERVICE_DOCUMENTATION
              value: "{{ .Values.service.env.SERVICE_DOCUMENTATION }}"
            - name: POINT_OF_CONTACT
              value: "{{ .Values.service.env.POINT_OF_CONTACT }}"
            - name: VERSION
              value: "{{ .Chart.Version }}"
            - name: METRICS_REPORTING_ENABLED
              value: "{{ .Values.service.env.METRICS_REPORTING_ENABLED }}"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
