// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go k8s.io/api/admission/v1beta1

package v1beta1

import authenticationv1 "k8s.io/api/authentication/v1"

// AdmissionReview describes an admission review request/response.
#AdmissionReview: {
	// Request describes the attributes for the admission request.
	// +optional
	request?: null | #AdmissionRequest @go(Request,*AdmissionRequest) @protobuf(1,bytes,opt)

	// Response describes the attributes for the admission response.
	// +optional
	response?: null | #AdmissionResponse @go(Response,*AdmissionResponse) @protobuf(2,bytes,opt)
}

// AdmissionRequest describes the admission.Attributes for the admission request.
#AdmissionRequest: {
	// SubResource is the subresource being requested, if any (for example, "status" or "scale")
	// +optional
	subResource?: string @go(SubResource) @protobuf(4,bytes,opt)

	// RequestSubResource is the name of the subresource of the original API request, if any (for example, "status" or "scale")
	// If this is specified and differs from the value in "subResource", an equivalent match and conversion was performed.
	// See documentation for the "matchPolicy" field in the webhook configuration type.
	// +optional
	requestSubResource?: string @go(RequestSubResource) @protobuf(15,bytes,opt)

	// Name is the name of the object as presented in the request.  On a CREATE operation, the client may omit name and
	// rely on the server to generate the name.  If that is the case, this field will contain an empty string.
	// +optional
	name?: string @go(Name) @protobuf(5,bytes,opt)

	// Namespace is the namespace associated with the request (if any).
	// +optional
	namespace?: string @go(Namespace) @protobuf(6,bytes,opt)

	// Operation is the operation being performed. This may be different than the operation
	// requested. e.g. a patch can result in either a CREATE or UPDATE Operation.
	operation: #Operation @go(Operation) @protobuf(7,bytes,opt)

	// UserInfo is information about the requesting user
	userInfo: authenticationv1.#UserInfo @go(UserInfo) @protobuf(8,bytes,opt)

	// DryRun indicates that modifications will definitely not be persisted for this request.
	// Defaults to false.
	// +optional
	dryRun?: null | bool @go(DryRun,*bool) @protobuf(11,varint,opt)
}

// AdmissionResponse describes an admission response.
#AdmissionResponse: {
	// Allowed indicates whether or not the admission request was permitted.
	allowed: bool @go(Allowed) @protobuf(2,varint,opt)

	// The patch body. Currently we only support "JSONPatch" which implements RFC 6902.
	// +optional
	patch?: bytes @go(Patch,[]byte) @protobuf(4,bytes,opt)

	// The type of Patch. Currently we only allow "JSONPatch".
	// +optional
	patchType?: null | #PatchType @go(PatchType,*PatchType) @protobuf(5,bytes,opt)

	// AuditAnnotations is an unstructured key value map set by remote admission controller (e.g. error=image-blacklisted).
	// MutatingAdmissionWebhook and ValidatingAdmissionWebhook admission controller will prefix the keys with
	// admission webhook name (e.g. imagepolicy.example.com/error=image-blacklisted). AuditAnnotations will be provided by
	// the admission webhook to add additional context to the audit log for this request.
	// +optional
	auditAnnotations?: {[string]: string} @go(AuditAnnotations,map[string]string) @protobuf(6,bytes,opt)

	// warnings is a list of warning messages to return to the requesting API client.
	// Warning messages describe a problem the client making the API request should correct or be aware of.
	// Limit warnings to 120 characters if possible.
	// Warnings over 256 characters and large numbers of warnings may be truncated.
	// +optional
	warnings?: [...string] @go(Warnings,[]string) @protobuf(7,bytes,rep)
}

// PatchType is the type of patch being used to represent the mutated object
#PatchType: string // #enumPatchType

#enumPatchType:
	#PatchTypeJSONPatch

#PatchTypeJSONPatch: #PatchType & "JSONPatch"

// Operation is the type of resource operation being checked for admission control
#Operation: string // #enumOperation

#enumOperation:
	#Create |
	#Update |
	#Delete |
	#Connect

#Create:  #Operation & "CREATE"
#Update:  #Operation & "UPDATE"
#Delete:  #Operation & "DELETE"
#Connect: #Operation & "CONNECT"
