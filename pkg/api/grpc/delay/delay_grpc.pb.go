// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: delay/delay.proto

package delay

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DelayServiceClient is the client API for DelayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DelayServiceClient interface {
	Delay(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*DelayResponse, error)
}

type delayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDelayServiceClient(cc grpc.ClientConnInterface) DelayServiceClient {
	return &delayServiceClient{cc}
}

func (c *delayServiceClient) Delay(ctx context.Context, in *DelayRequest, opts ...grpc.CallOption) (*DelayResponse, error) {
	out := new(DelayResponse)
	err := c.cc.Invoke(ctx, "/delay.DelayService/Delay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DelayServiceServer is the server API for DelayService service.
// All implementations must embed UnimplementedDelayServiceServer
// for forward compatibility
type DelayServiceServer interface {
	Delay(context.Context, *DelayRequest) (*DelayResponse, error)
	mustEmbedUnimplementedDelayServiceServer()
}

// UnimplementedDelayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDelayServiceServer struct {
}

func (UnimplementedDelayServiceServer) Delay(context.Context, *DelayRequest) (*DelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delay not implemented")
}
func (UnimplementedDelayServiceServer) mustEmbedUnimplementedDelayServiceServer() {}

// UnsafeDelayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DelayServiceServer will
// result in compilation errors.
type UnsafeDelayServiceServer interface {
	mustEmbedUnimplementedDelayServiceServer()
}

func RegisterDelayServiceServer(s grpc.ServiceRegistrar, srv DelayServiceServer) {
	s.RegisterService(&DelayService_ServiceDesc, srv)
}

func _DelayService_Delay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelayServiceServer).Delay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delay.DelayService/Delay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelayServiceServer).Delay(ctx, req.(*DelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DelayService_ServiceDesc is the grpc.ServiceDesc for DelayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DelayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "delay.DelayService",
	HandlerType: (*DelayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delay",
			Handler:    _DelayService_Delay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delay/delay.proto",
}
